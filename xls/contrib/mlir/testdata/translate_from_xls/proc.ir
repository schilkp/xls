// RUN: xls_translate --xls-to-mlir-xls %s 2>&1 | FileCheck %s

package simple_proc

file_number 0 "./simple_proc.x"

// CHECK-LABEL: xls.chan @ch_inp {send_supported = false} : i32
chan ch_inp(bits[32], id=0, kind=streaming, ops=receive_only, metadata="")

// CHECK-LABEL: xls.chan @ch_out {recv_supported = false} : i32
chan ch_out(bits[32], id=1, kind=streaming, ops=send_only, metadata="")

// CHECK-LABEL: xls.chan @ch_inp2 {send_supported = false} : i32
chan ch_inp2(bits[32], id=50, kind=streaming, ops=receive_only, metadata="")

// CHECK-LABEL: xls.chan @ch_out2 {recv_supported = false} : i32
chan ch_out2(bits[32], id=51, kind=streaming, ops=send_only, metadata="")

// CHECK-LABEL: xls.eproc @ident() zeroinitializer {
// CHECK:         xls.proc.yield
// CHECK:       }
top proc ident() {
  after_all.4: token = after_all(id=4)
  receive.15: (token, bits[32]) = receive(after_all.4, channel=ch_inp, id=15)
  tok: token = tuple_index(receive.15, index=0, id=7)
  val: bits[32] = tuple_index(receive.15, index=1, id=8)
  send.16: token = send(tok, val, channel=ch_out, id=16)
}

// CHECK-LABEL: xls.eproc @accum
// CHECK-NOT: zeroinitializer
proc accum(__state: bits[32], init={10}) {
  __state: bits[32] = state_read(state_element=__state, id=30)
  after_all.31: token = after_all(id=31)
  literal.32: bits[1] = literal(value=1, id=32)
  receive.33: (token, bits[32]) = receive(after_all.31, predicate=literal.32, channel=ch_inp2, id=33)
  a: bits[32] = tuple_index(receive.33, index=1, id=34)
  tok_a: token = tuple_index(receive.33, index=0, id=35)
  sum: bits[32] = add(a, __state, id=36)
  tuple_index.37: token = tuple_index(receive.33, index=0, id=37)
  send.38: token = send(tok_a, sum, predicate=literal.32, channel=ch_out2, id=38)
  // CHECK: %[[init_lit:.%]] = "xls.constant_scalar"
  // CHECK: xls.proc.yield
  // CHECK-SAME: (init=%[[init_lit]])
  next_value.39: () = next_value(param=__state, value=sum, id=39)
}
